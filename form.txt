<p> Reactive forms are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms. ...<p> Template-driven forms are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, use template-driven forms.
......<p>Both reactive and template-driven forms share underlying building blocks: >> FormControl tracks the value and validation status of an individual form control. >> FormGroup tracks the same values and status for a collection of form controls. >> FormArray tracks the same values and status for an array of form controls. >> ControlValueAccessor creates a bridge between Angular FormControl instances and native DOM elements.
.....<title - form model setup> Reactive and template-driven forms both use a form model to track value changes between Angular forms and form input elements. <title-Setup in reactive forms> <p> The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the FormControl instance. <p> With reactive forms, the form model is explicitly defined in the component class. The reactive form directive (in this case, FormControlDirective) then links the existing FormControl instance to a specific form element in the view using a value accessor (ControlValueAccessor instance).  <p> <title - Setup in template-driven forms> In template-driven forms, the source of truth is the template. <p> The abstraction of the form model promotes simplicity over structure. The template-driven form directive NgModel is responsible for creating and managing the FormControl instance for a given form element. It's less explicit, but you no longer have direct control over the form model.  <p> <title - Data flow in forms> When building forms in Angular, it's important to understand how the framework handles data flowing from the user or from programmatic changes. Reactive and template-driven forms follow two different strategies when handling form input. The data flow examples below begin with the favorite color input field example from above, and then show how changes to favorite color are handled in reactive forms compared to template-driven forms. <p> <title-Data flow in reactive forms> As described above, in reactive forms each form element in the view is directly linked to a form model (FormControl instance). Updates from the view to the model and from the model to the view are synchronous and aren't dependent on the UI rendered. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model. <p> The steps below outline the data flow from view to model: 1) The user types a value into the input element, in this case the favorite color Blue. 2)The form input element emits an "input" event with the latest value. 3) The control value accessor listening for events on the form input element immediately relays the new value to the FormControl instance. 4) The FormControl instance emits the new value through the valueChanges observable. 5) Any subscribers to the valueChanges observable receive the new value.....<p> The steps below outline the data flow from model to view: 1) The user calls the favoriteColorControl.setValue() method, which updates the FormControl value. 2) The FormControl instance emits the new value through the valueChanges observable. 3) Any subscribers to the valueChanges observable receive the new value. 4) The control value accessor on the form input element updates the element with the new value.
.....<Title-Data flow in template-driven forms> In template-driven forms, each form element is linked to a directive that manages the form model internally. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model. <p> The steps below outline the data flow from view to model when the input value changes from Red to Blue: 1) The user types Blue into the input element. 2) The input element emits an "input" event with the value Blue. 3) The control value accessor attached to the input triggers the setValue() method on the FormControl instance. 4) The FormControl instance emits the new value through the valueChanges observable. 5) Any subscribers to the valueChanges observable receive the new value. 6) The control value accessor also calls the NgModel.viewToModelUpdate() method which emits an ngModelChange event. 7) Because the component template uses two-way data binding for the favoriteColor property, the favoriteColor property in the component is updated to the value emitted by the ngModelChange event (Blue).....<p>The steps below outline the data flow from model to view when the favoriteColor changes from Blue to Red: 1) The favoriteColor value is updated in the component. 2) Change detection begins. 3) During change detection, the ngOnChanges lifecycle hook is called on the NgModel directive instance because the value of one of its inputs has changed. 4) The ngOnChanges() method queues an async task to set the value for the internal FormControl instance. 5) Change detection completes. 6) On the next tick, the task to set the FormControl instance value is executed. 7) The FormControl instance emits the latest value through the valueChanges observable. 8) Any subscribers to the valueChanges observable receive the new value. 9) The control value accessor updates the form input element in the view with the latest favoriteColor value.
......<title-Form validation> 